{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calculateContractAddressFromHash = exports.calculcateTransactionHash = exports.calculateDeployTransactionHash = exports.calculateTransactionHashCommon = exports.computeHashOnElements = exports.pedersen = exports.getSelectorFromName = exports.starknetKeccak = exports.keccakBn = exports.feeTransactionVersion = exports.transactionVersion = void 0;\n\nvar keccak_1 = require(\"ethereum-cryptography/keccak\");\n\nvar utils_1 = require(\"ethereum-cryptography/utils\");\n\nvar minimalistic_assert_1 = __importDefault(require(\"minimalistic-assert\"));\n\nvar constants_1 = require(\"../constants\");\n\nvar ellipticCurve_1 = require(\"./ellipticCurve\");\n\nvar encode_1 = require(\"./encode\");\n\nvar number_1 = require(\"./number\");\n\nexports.transactionVersion = 0;\nexports.feeTransactionVersion = (0, number_1.toBN)(2).pow((0, number_1.toBN)(128)).add((0, number_1.toBN)(exports.transactionVersion));\n\nfunction keccakBn(value) {\n  var hexWithoutPrefix = (0, encode_1.removeHexPrefix)((0, number_1.toHex)((0, number_1.toBN)(value)));\n  var evenHex = hexWithoutPrefix.length % 2 === 0 ? hexWithoutPrefix : \"0\".concat(hexWithoutPrefix);\n  return (0, encode_1.addHexPrefix)((0, encode_1.buf2hex)((0, keccak_1.keccak256)((0, utils_1.hexToBytes)(evenHex))));\n}\n\nexports.keccakBn = keccakBn;\n\nfunction keccakHex(value) {\n  return (0, encode_1.addHexPrefix)((0, encode_1.buf2hex)((0, keccak_1.keccak256)((0, encode_1.utf8ToArray)(value))));\n}\n/**\n * Function to get the starknet keccak hash from a string\n *\n * [Reference](https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/public/abi.py#L17-L22)\n * @param value - string you want to get the starknetKeccak hash from\n * @returns starknet keccak hash as BigNumber\n */\n\n\nfunction starknetKeccak(value) {\n  return (0, number_1.toBN)(keccakHex(value)).and(constants_1.MASK_250);\n}\n\nexports.starknetKeccak = starknetKeccak;\n/**\n * Function to get the hex selector from a given function name\n *\n * [Reference](https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/public/abi.py#L25-L26)\n * @param funcName - selectors abi function name\n * @returns hex selector of given abi function name\n */\n\nfunction getSelectorFromName(funcName) {\n  // sometimes BigInteger pads the hex string with zeros, which isnt allowed in the starknet api\n  return (0, number_1.toHex)(starknetKeccak(funcName));\n}\n\nexports.getSelectorFromName = getSelectorFromName;\nvar constantPoints = constants_1.CONSTANT_POINTS.map(function (coords) {\n  return ellipticCurve_1.ec.curve.point(coords[0], coords[1]);\n});\n\nfunction pedersen(input) {\n  var point = constantPoints[0];\n\n  for (var i = 0; i < input.length; i += 1) {\n    var x = (0, number_1.toBN)(input[i]);\n    (0, minimalistic_assert_1.default)(x.gte(constants_1.ZERO) && x.lt((0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.FIELD_PRIME))), \"Invalid input: \".concat(input[i]));\n\n    for (var j = 0; j < 252; j += 1) {\n      var pt = constantPoints[2 + i * 252 + j];\n      (0, minimalistic_assert_1.default)(!point.getX().eq(pt.getX()));\n\n      if (x.and(constants_1.ONE).toNumber() !== 0) {\n        point = point.add(pt);\n      }\n\n      x = x.shrn(1);\n    }\n  }\n\n  return (0, encode_1.addHexPrefix)(point.getX().toString(16));\n}\n\nexports.pedersen = pedersen;\n\nfunction computeHashOnElements(data) {\n  return __spreadArray(__spreadArray([], __read(data), false), [data.length], false).reduce(function (x, y) {\n    return pedersen([x, y]);\n  }, 0).toString();\n}\n\nexports.computeHashOnElements = computeHashOnElements; // following implementation is based on this python implementation:\n// https://github.com/starkware-libs/cairo-lang/blob/b614d1867c64f3fb2cf4a4879348cfcf87c3a5a7/src/starkware/starknet/core/os/transaction_hash/transaction_hash.py\n\nfunction calculateTransactionHashCommon(txHashPrefix, version, contractAddress, entryPointSelector, calldata, maxFee, chainId, additionalData) {\n  if (additionalData === void 0) {\n    additionalData = [];\n  }\n\n  var calldataHash = computeHashOnElements(calldata);\n\n  var dataToHash = __spreadArray([txHashPrefix, version, contractAddress, entryPointSelector, calldataHash, maxFee, chainId], __read(additionalData), false);\n\n  return computeHashOnElements(dataToHash);\n}\n\nexports.calculateTransactionHashCommon = calculateTransactionHashCommon;\n\nfunction calculateDeployTransactionHash(contractAddress, constructorCalldata, version, chainId) {\n  return calculateTransactionHashCommon(constants_1.TransactionHashPrefix.DEPLOY, version, contractAddress, getSelectorFromName('constructor'), constructorCalldata, constants_1.ZERO, chainId);\n}\n\nexports.calculateDeployTransactionHash = calculateDeployTransactionHash;\n\nfunction calculcateTransactionHash(contractAddress, version, entryPointSelector, calldata, maxFee, chainId) {\n  return calculateTransactionHashCommon(constants_1.TransactionHashPrefix.INVOKE, version, contractAddress, entryPointSelector, calldata, maxFee, chainId);\n}\n\nexports.calculcateTransactionHash = calculcateTransactionHash;\n\nfunction calculateContractAddressFromHash(salt, classHash, constructorCalldata, deployerAddress) {\n  var constructorCalldataHash = computeHashOnElements(constructorCalldata);\n  var CONTRACT_ADDRESS_PREFIX = (0, number_1.toFelt)('0x535441524b4e45545f434f4e54524143545f41444452455353'); // Equivalent to 'STARKNET_CONTRACT_ADDRESS'\n\n  var dataToHash = [CONTRACT_ADDRESS_PREFIX, deployerAddress, salt, classHash, constructorCalldataHash];\n  return computeHashOnElements(dataToHash);\n}\n\nexports.calculateContractAddressFromHash = calculateContractAddressFromHash;","map":{"version":3,"names":["__read","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","value","error","__spreadArray","to","from","pack","arguments","length","l","Array","prototype","slice","concat","__importDefault","mod","__esModule","Object","defineProperty","exports","calculateContractAddressFromHash","calculcateTransactionHash","calculateDeployTransactionHash","calculateTransactionHashCommon","computeHashOnElements","pedersen","getSelectorFromName","starknetKeccak","keccakBn","feeTransactionVersion","transactionVersion","keccak_1","require","utils_1","minimalistic_assert_1","constants_1","ellipticCurve_1","encode_1","number_1","toBN","pow","add","hexWithoutPrefix","removeHexPrefix","toHex","evenHex","addHexPrefix","buf2hex","keccak256","hexToBytes","keccakHex","utf8ToArray","and","MASK_250","funcName","constantPoints","CONSTANT_POINTS","map","coords","ec","curve","point","input","x","default","gte","ZERO","lt","FIELD_PRIME","j","pt","getX","eq","ONE","toNumber","shrn","toString","data","reduce","y","txHashPrefix","version","contractAddress","entryPointSelector","calldata","maxFee","chainId","additionalData","calldataHash","dataToHash","constructorCalldata","TransactionHashPrefix","DEPLOY","INVOKE","salt","classHash","deployerAddress","constructorCalldataHash","CONTRACT_ADDRESS_PREFIX","toFelt"],"sources":["/Users/rmzlb/Dropbox/Mac (2)/Documents/GitHub/8mvmt-react/node_modules/starknet/dist/utils/hash.js"],"sourcesContent":["\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.calculateContractAddressFromHash = exports.calculcateTransactionHash = exports.calculateDeployTransactionHash = exports.calculateTransactionHashCommon = exports.computeHashOnElements = exports.pedersen = exports.getSelectorFromName = exports.starknetKeccak = exports.keccakBn = exports.feeTransactionVersion = exports.transactionVersion = void 0;\nvar keccak_1 = require(\"ethereum-cryptography/keccak\");\nvar utils_1 = require(\"ethereum-cryptography/utils\");\nvar minimalistic_assert_1 = __importDefault(require(\"minimalistic-assert\"));\nvar constants_1 = require(\"../constants\");\nvar ellipticCurve_1 = require(\"./ellipticCurve\");\nvar encode_1 = require(\"./encode\");\nvar number_1 = require(\"./number\");\nexports.transactionVersion = 0;\nexports.feeTransactionVersion = (0, number_1.toBN)(2).pow((0, number_1.toBN)(128)).add((0, number_1.toBN)(exports.transactionVersion));\nfunction keccakBn(value) {\n    var hexWithoutPrefix = (0, encode_1.removeHexPrefix)((0, number_1.toHex)((0, number_1.toBN)(value)));\n    var evenHex = hexWithoutPrefix.length % 2 === 0 ? hexWithoutPrefix : \"0\".concat(hexWithoutPrefix);\n    return (0, encode_1.addHexPrefix)((0, encode_1.buf2hex)((0, keccak_1.keccak256)((0, utils_1.hexToBytes)(evenHex))));\n}\nexports.keccakBn = keccakBn;\nfunction keccakHex(value) {\n    return (0, encode_1.addHexPrefix)((0, encode_1.buf2hex)((0, keccak_1.keccak256)((0, encode_1.utf8ToArray)(value))));\n}\n/**\n * Function to get the starknet keccak hash from a string\n *\n * [Reference](https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/public/abi.py#L17-L22)\n * @param value - string you want to get the starknetKeccak hash from\n * @returns starknet keccak hash as BigNumber\n */\nfunction starknetKeccak(value) {\n    return (0, number_1.toBN)(keccakHex(value)).and(constants_1.MASK_250);\n}\nexports.starknetKeccak = starknetKeccak;\n/**\n * Function to get the hex selector from a given function name\n *\n * [Reference](https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/public/abi.py#L25-L26)\n * @param funcName - selectors abi function name\n * @returns hex selector of given abi function name\n */\nfunction getSelectorFromName(funcName) {\n    // sometimes BigInteger pads the hex string with zeros, which isnt allowed in the starknet api\n    return (0, number_1.toHex)(starknetKeccak(funcName));\n}\nexports.getSelectorFromName = getSelectorFromName;\nvar constantPoints = constants_1.CONSTANT_POINTS.map(function (coords) {\n    return ellipticCurve_1.ec.curve.point(coords[0], coords[1]);\n});\nfunction pedersen(input) {\n    var point = constantPoints[0];\n    for (var i = 0; i < input.length; i += 1) {\n        var x = (0, number_1.toBN)(input[i]);\n        (0, minimalistic_assert_1.default)(x.gte(constants_1.ZERO) && x.lt((0, number_1.toBN)((0, encode_1.addHexPrefix)(constants_1.FIELD_PRIME))), \"Invalid input: \".concat(input[i]));\n        for (var j = 0; j < 252; j += 1) {\n            var pt = constantPoints[2 + i * 252 + j];\n            (0, minimalistic_assert_1.default)(!point.getX().eq(pt.getX()));\n            if (x.and(constants_1.ONE).toNumber() !== 0) {\n                point = point.add(pt);\n            }\n            x = x.shrn(1);\n        }\n    }\n    return (0, encode_1.addHexPrefix)(point.getX().toString(16));\n}\nexports.pedersen = pedersen;\nfunction computeHashOnElements(data) {\n    return __spreadArray(__spreadArray([], __read(data), false), [data.length], false).reduce(function (x, y) { return pedersen([x, y]); }, 0).toString();\n}\nexports.computeHashOnElements = computeHashOnElements;\n// following implementation is based on this python implementation:\n// https://github.com/starkware-libs/cairo-lang/blob/b614d1867c64f3fb2cf4a4879348cfcf87c3a5a7/src/starkware/starknet/core/os/transaction_hash/transaction_hash.py\nfunction calculateTransactionHashCommon(txHashPrefix, version, contractAddress, entryPointSelector, calldata, maxFee, chainId, additionalData) {\n    if (additionalData === void 0) { additionalData = []; }\n    var calldataHash = computeHashOnElements(calldata);\n    var dataToHash = __spreadArray([\n        txHashPrefix,\n        version,\n        contractAddress,\n        entryPointSelector,\n        calldataHash,\n        maxFee,\n        chainId\n    ], __read(additionalData), false);\n    return computeHashOnElements(dataToHash);\n}\nexports.calculateTransactionHashCommon = calculateTransactionHashCommon;\nfunction calculateDeployTransactionHash(contractAddress, constructorCalldata, version, chainId) {\n    return calculateTransactionHashCommon(constants_1.TransactionHashPrefix.DEPLOY, version, contractAddress, getSelectorFromName('constructor'), constructorCalldata, constants_1.ZERO, chainId);\n}\nexports.calculateDeployTransactionHash = calculateDeployTransactionHash;\nfunction calculcateTransactionHash(contractAddress, version, entryPointSelector, calldata, maxFee, chainId) {\n    return calculateTransactionHashCommon(constants_1.TransactionHashPrefix.INVOKE, version, contractAddress, entryPointSelector, calldata, maxFee, chainId);\n}\nexports.calculcateTransactionHash = calculcateTransactionHash;\nfunction calculateContractAddressFromHash(salt, classHash, constructorCalldata, deployerAddress) {\n    var constructorCalldataHash = computeHashOnElements(constructorCalldata);\n    var CONTRACT_ADDRESS_PREFIX = (0, number_1.toFelt)('0x535441524b4e45545f434f4e54524143545f41444452455353'); // Equivalent to 'STARKNET_CONTRACT_ADDRESS'\n    var dataToHash = [\n        CONTRACT_ADDRESS_PREFIX,\n        deployerAddress,\n        salt,\n        classHash,\n        constructorCalldataHash,\n    ];\n    return computeHashOnElements(dataToHash);\n}\nexports.calculateContractAddressFromHash = calculateContractAddressFromHash;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}