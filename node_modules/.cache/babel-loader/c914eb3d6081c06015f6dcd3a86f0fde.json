{"ast":null,"code":"// String encode/decode helpers\n'use strict'; // Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\n\nvar STR_APPLY_UIA_OK = true;\n\ntry {\n  String.fromCharCode.apply(null, new Uint8Array(1));\n} catch (__) {\n  STR_APPLY_UIA_OK = false;\n} // Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\n\n\nvar _utf8len = new Uint8Array(256);\n\nfor (var q = 0; q < 256; q++) {\n  _utf8len[q] = q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1;\n}\n\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n// convert string to array (typed, when possible)\n\nmodule.exports.string2buf = function (str) {\n  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {\n    return new TextEncoder().encode(str);\n  }\n\n  var buf,\n      c,\n      c2,\n      m_pos,\n      i,\n      str_len = str.length,\n      buf_len = 0; // count binary size\n\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n\n    if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {\n      c2 = str.charCodeAt(m_pos + 1);\n\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  } // allocate buffer\n\n\n  buf = new Uint8Array(buf_len); // convert\n\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n\n    if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {\n      c2 = str.charCodeAt(m_pos + 1);\n\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | c >>> 6;\n      buf[i++] = 0x80 | c & 0x3f;\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | c >>> 12;\n      buf[i++] = 0x80 | c >>> 6 & 0x3f;\n      buf[i++] = 0x80 | c & 0x3f;\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | c >>> 18;\n      buf[i++] = 0x80 | c >>> 12 & 0x3f;\n      buf[i++] = 0x80 | c >>> 6 & 0x3f;\n      buf[i++] = 0x80 | c & 0x3f;\n    }\n  }\n\n  return buf;\n}; // Helper\n\n\nvar buf2binstring = function buf2binstring(buf, len) {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  var result = '';\n\n  for (var i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n\n  return result;\n}; // convert array to string\n\n\nmodule.exports.buf2string = function (buf, max) {\n  var len = max || buf.length;\n\n  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {\n    return new TextDecoder().decode(buf.subarray(0, max));\n  }\n\n  var i, out; // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n\n  var utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    var c = buf[i++]; // quick process ascii\n\n    if (c < 0x80) {\n      utf16buf[out++] = c;\n      continue;\n    }\n\n    var c_len = _utf8len[c]; // skip 5 & 6 byte codes\n\n    if (c_len > 4) {\n      utf16buf[out++] = 0xfffd;\n      i += c_len - 1;\n      continue;\n    } // apply mask on first byte\n\n\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07; // join the rest\n\n    while (c_len > 1 && i < len) {\n      c = c << 6 | buf[i++] & 0x3f;\n      c_len--;\n    } // terminated by end of string?\n\n\n    if (c_len > 1) {\n      utf16buf[out++] = 0xfffd;\n      continue;\n    }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | c >> 10 & 0x3ff;\n      utf16buf[out++] = 0xdc00 | c & 0x3ff;\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n}; // Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\n\n\nmodule.exports.utf8border = function (buf, max) {\n  max = max || buf.length;\n\n  if (max > buf.length) {\n    max = buf.length;\n  } // go back from last position, until start of sequence found\n\n\n  var pos = max - 1;\n\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) {\n    pos--;\n  } // Very small and broken sequence,\n  // return max, because we should return something anyway.\n\n\n  if (pos < 0) {\n    return max;\n  } // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n\n\n  if (pos === 0) {\n    return max;\n  }\n\n  return pos + _utf8len[buf[pos]] > max ? pos : max;\n};","map":{"version":3,"names":["STR_APPLY_UIA_OK","String","fromCharCode","apply","Uint8Array","__","_utf8len","q","module","exports","string2buf","str","TextEncoder","prototype","encode","buf","c","c2","m_pos","i","str_len","length","buf_len","charCodeAt","buf2binstring","len","subarray","result","buf2string","max","TextDecoder","decode","out","utf16buf","Array","c_len","utf8border","pos"],"sources":["/Users/rmzlb/Dropbox/Mac (2)/Documents/GitHub/8mvmt-react/node_modules/pako/lib/utils/strings.js"],"sourcesContent":["// String encode/decode helpers\n'use strict';\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nmodule.exports.string2buf = (str) => {\n  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {\n    return new TextEncoder().encode(str);\n  }\n\n  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new Uint8Array(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n};\n\n\n// convert array to string\nmodule.exports.buf2string = (buf, max) => {\n  const len = max || buf.length;\n\n  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {\n    return new TextDecoder().decode(buf.subarray(0, max));\n  }\n\n  let i, out;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    let c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nmodule.exports.utf8border = (buf, max) => {\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  let pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}