{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/rmzlb/Dropbox/Mac (2)/Documents/GitHub/8mvmt-react/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _regeneratorRuntime = require(\"/Users/rmzlb/Dropbox/Mac (2)/Documents/GitHub/8mvmt-react/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"/Users/rmzlb/Dropbox/Mac (2)/Documents/GitHub/8mvmt-react/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _slicedToArray = require(\"/Users/rmzlb/Dropbox/Mac (2)/Documents/GitHub/8mvmt-react/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StarknetTransactionManagerProvider = void 0;\n\nvar jsx_runtime_1 = require(\"react/jsx-runtime\");\n\nvar react_1 = require(\"react\");\n\nvar immutable_1 = require(\"immutable\");\n\nvar starknet_1 = require(\"../starknet\");\n\nvar context_1 = require(\"./context\");\n\nvar reducer_1 = require(\"./reducer\");\n\nfunction shouldRefreshTransaction(transaction, now) {\n  // try to get transaction data as soon as possible\n  if (transaction.status === 'TRANSACTION_RECEIVED') {\n    return true;\n  } // wont' be updated anymore\n\n\n  if (transaction.status === 'ACCEPTED_ON_L1' || transaction.status === 'REJECTED') {\n    return false;\n  } // every couple of minutes is enough. Blocks finalized infrequently.\n\n\n  if (transaction.status === 'ACCEPTED_ON_L2') {\n    return now - transaction.lastUpdatedAt > 120000;\n  }\n\n  return now - transaction.lastUpdatedAt > 15000;\n}\n\nfunction StarknetTransactionManagerProvider(_ref) {\n  var children = _ref.children,\n      interval = _ref.interval;\n\n  var _ref2 = (0, starknet_1.useStarknet)(),\n      library = _ref2.library;\n\n  var _ref3 = (0, react_1.useReducer)(reducer_1.transactionManagerReducer, {\n    transactions: (0, immutable_1.List)()\n  }),\n      _ref4 = _slicedToArray(_ref3, 2),\n      state = _ref4[0],\n      dispatch = _ref4[1];\n\n  var refresh = (0, react_1.useCallback)( /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(transactionHash) {\n      var transactionResponse, lastUpdatedAt;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return library.getTransaction(transactionHash);\n\n            case 3:\n              transactionResponse = _context.sent;\n              lastUpdatedAt = Date.now();\n              dispatch({\n                type: 'update_transaction',\n                transactionResponse: transactionResponse,\n                lastUpdatedAt: lastUpdatedAt,\n                transactionHash: transactionHash\n              });\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              // TODO(fra): somehow should track the error\n              console.error(_context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n\n    return function (_x) {\n      return _ref5.apply(this, arguments);\n    };\n  }(), [library, dispatch]);\n  var refreshAllTransactions = (0, react_1.useCallback)(function () {\n    var now = Date.now();\n\n    var _iterator = _createForOfIteratorHelper(state.transactions),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var transaction = _step.value;\n\n        if (shouldRefreshTransaction(transaction, now)) {\n          refresh(transaction.transactionHash);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }, [state.transactions, refresh]);\n  var addTransaction = (0, react_1.useCallback)(function (transaction) {\n    dispatch({\n      type: 'add_transaction',\n      transaction: transaction\n    });\n  }, [dispatch]);\n  var removeTransaction = (0, react_1.useCallback)(function (transactionHash) {\n    dispatch({\n      type: 'remove_transaction',\n      transactionHash: transactionHash\n    });\n  }, [dispatch]);\n  var refreshTransaction = (0, react_1.useCallback)(function (transactionHash) {\n    refresh(transactionHash);\n  }, [refresh]); // periodically refresh all transactions.\n  // do this more often than once per block since there are\n  // different stages of \"accepted\" transactions.\n\n  (0, react_1.useEffect)(function () {\n    refreshAllTransactions();\n    var intervalId = setInterval(function () {\n      refreshAllTransactions();\n    }, interval !== null && interval !== void 0 ? interval : 5000);\n    return function () {\n      return clearInterval(intervalId);\n    };\n  }, [interval, refreshAllTransactions]);\n  return (0, jsx_runtime_1.jsx)(context_1.TransactionManagerContext.Provider, {\n    value: {\n      transactions: state.transactions.toArray(),\n      addTransaction: addTransaction,\n      removeTransaction: removeTransaction,\n      refreshTransaction: refreshTransaction\n    },\n    children: children\n  });\n}\n\nexports.StarknetTransactionManagerProvider = StarknetTransactionManagerProvider;","map":{"version":3,"mappings":"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","names":["shouldRefreshTransaction","transaction","now","status","lastUpdatedAt","StarknetTransactionManagerProvider","children","interval","library","reducer_1","transactions","state","dispatch","refresh","transactionHash","getTransaction","transactionResponse","Date","type","console","error","refreshAllTransactions","addTransaction","removeTransaction","refreshTransaction","intervalId","setInterval","clearInterval","context_1","Provider","value","toArray","exports"],"sources":["../../../src/providers/transaction/provider.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}