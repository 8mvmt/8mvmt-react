{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StarknetTransactionManagerProvider = void 0;\n\nconst jsx_runtime_1 = require(\"react/jsx-runtime\");\n\nconst react_1 = require(\"react\");\n\nconst immutable_1 = require(\"immutable\");\n\nconst starknet_1 = require(\"../starknet\");\n\nconst context_1 = require(\"./context\");\n\nconst reducer_1 = require(\"./reducer\");\n\nfunction shouldRefreshTransaction(transaction, now) {\n  // try to get transaction data as soon as possible\n  if (transaction.status === 'TRANSACTION_RECEIVED') {\n    return true;\n  } // wont' be updated anymore\n\n\n  if (transaction.status === 'ACCEPTED_ON_L1' || transaction.status === 'REJECTED') {\n    return false;\n  } // every couple of minutes is enough. Blocks finalized infrequently.\n\n\n  if (transaction.status === 'ACCEPTED_ON_L2') {\n    return now - transaction.lastUpdatedAt > 120000;\n  }\n\n  return now - transaction.lastUpdatedAt > 15000;\n}\n\nfunction StarknetTransactionManagerProvider(_ref) {\n  let {\n    children,\n    interval\n  } = _ref;\n  const {\n    library\n  } = (0, starknet_1.useStarknet)();\n  const [state, dispatch] = (0, react_1.useReducer)(reducer_1.transactionManagerReducer, {\n    transactions: (0, immutable_1.List)()\n  });\n  const refresh = (0, react_1.useCallback)(async transactionHash => {\n    try {\n      const transactionResponse = await library.getTransaction(transactionHash);\n      const lastUpdatedAt = Date.now();\n      dispatch({\n        type: 'update_transaction',\n        transactionResponse,\n        lastUpdatedAt,\n        transactionHash\n      });\n    } catch (err) {\n      // TODO(fra): somehow should track the error\n      console.error(err);\n    }\n  }, [library, dispatch]);\n  const refreshAllTransactions = (0, react_1.useCallback)(() => {\n    const now = Date.now();\n\n    for (const transaction of state.transactions) {\n      if (shouldRefreshTransaction(transaction, now)) {\n        refresh(transaction.transactionHash);\n      }\n    }\n  }, [state.transactions, refresh]);\n  const addTransaction = (0, react_1.useCallback)(transaction => {\n    dispatch({\n      type: 'add_transaction',\n      transaction\n    });\n  }, [dispatch]);\n  const removeTransaction = (0, react_1.useCallback)(transactionHash => {\n    dispatch({\n      type: 'remove_transaction',\n      transactionHash\n    });\n  }, [dispatch]);\n  const refreshTransaction = (0, react_1.useCallback)(transactionHash => {\n    refresh(transactionHash);\n  }, [refresh]); // periodically refresh all transactions.\n  // do this more often than once per block since there are\n  // different stages of \"accepted\" transactions.\n\n  (0, react_1.useEffect)(() => {\n    refreshAllTransactions();\n    const intervalId = setInterval(() => {\n      refreshAllTransactions();\n    }, interval ?? 5000);\n    return () => clearInterval(intervalId);\n  }, [interval, refreshAllTransactions]);\n  return (0, jsx_runtime_1.jsx)(context_1.TransactionManagerContext.Provider, {\n    value: {\n      transactions: state.transactions.toArray(),\n      addTransaction,\n      removeTransaction,\n      refreshTransaction\n    },\n    children: children\n  });\n}\n\nexports.StarknetTransactionManagerProvider = StarknetTransactionManagerProvider;","map":{"version":3,"mappings":"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","names":["shouldRefreshTransaction","transaction","now","status","lastUpdatedAt","StarknetTransactionManagerProvider","children","interval","library","state","dispatch","reducer_1","transactions","refresh","transactionHash","transactionResponse","getTransaction","Date","type","err","console","error","refreshAllTransactions","addTransaction","removeTransaction","refreshTransaction","intervalId","setInterval","clearInterval","context_1","Provider","value","toArray","exports"],"sources":["../../../src/providers/transaction/provider.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}